# bot.py  â€”  BTÃœ Lisans YÃ¶netmelik Telegram Botu 
import os, re, asyncio, chromadb
from dotenv import load_dotenv
from typing import List, Dict, Any
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, ContextTypes,
    CommandHandler, MessageHandler, filters
)
from telegram.constants import ChatAction  

from langchain_openai import ChatOpenAI, OpenAIEmbeddings
from langchain_chroma import Chroma
from langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder
from langchain_core.output_parsers import StrOutputParser
from langchain_core.runnables import RunnablePassthrough
from langchain_core.messages import AIMessage, HumanMessage
from langchain_core.documents import Document

#.env ayarlarÄ±
load_dotenv()
TG_TOKEN = os.getenv("TELEGRAM_TOKEN")
OA_KEY   = os.getenv("OPENAI_API_KEY")
if not TG_TOKEN or not OA_KEY:
    raise SystemExit("TELEGRAM_TOKEN veya OPENAI_API_KEY tanÄ±mlÄ± deÄŸil!")

LLM = ChatOpenAI(model_name="gpt-4.1", temperature=0)
EMB = OpenAIEmbeddings(model="text-embedding-3-large")
# ChromaDB istemcisi ve vektÃ¶r veritabanÄ±
client = chromadb.PersistentClient(path="chroma_store") 
vectordb = Chroma(
    client            = client,
    collection_name   = "btu_yonetmelik",
    embedding_function= EMB
)

THRESH = 0.1   # Benzerlik eÅŸiÄŸi


MAX_HISTORY = 10   # Sohbet geÃ§miÅŸi sÄ±nÄ±rÄ±

# Sohbet geÃ§miÅŸini getirir oluÅŸturur
def get_message_history(chat_data: Dict[str, Any]) -> List:   
    """Sohbet geÃ§miÅŸini al veya baÅŸlat"""
    if 'history' not in chat_data:
        chat_data['history'] = []
    return chat_data['history']

def update_history(chat_data: Dict[str, Any], user_msg: str, bot_msg: str):
    """GeÃ§miÅŸi gÃ¼ncelle (yeni mesajlarÄ± ekle ve boyutu sÄ±nÄ±rla)"""
    history = chat_data['history']
    
    # Yeni mesajlarÄ± ekle
    history.append(HumanMessage(content=user_msg)) # 
    history.append(AIMessage(content=bot_msg)) # 
    
    # GeÃ§miÅŸi sÄ±nÄ±rla
    if len(history) > MAX_HISTORY:
        chat_data['history'] = history[-MAX_HISTORY:]

# Sohbet zincirleri oluÅŸturma fonksiyonlarÄ±
def create_regulation_chain():
    """YÃ¶netmelik sorgularÄ± iÃ§in zincir oluÅŸturma """
    prompt = ChatPromptTemplate.from_messages([
        ("system", 
            "Sen BTÃœ lisans yÃ¶netmelik asistanÄ±sÄ±n. "
            "Lutfen soruyu Ã¶nce anlamlandÄ±r sonra dosyalardan en alakalÄ± kÄ±smÄ± baz alarak yanÄ±tla."
            "- TeÅŸekkÃ¼r, memnuniyet ifadeleri ve genel sohbet mesajlarÄ±nda 'Ä°lgili madde:' bilgisini sakÄ±n kullanma ve ekleme"
            "EÄŸer tam olarak dosyalardan ilgili veriyi bulamÄ±yorsan 'ÃœzgÃ¼nÃ¼m yÃ¶netmelik dosyalarÄ±nda bu konuya dair bir bilgi bulamadÄ±m.' ÅŸeklinde cevap ver. Ve asla 'Ä°lgili madde:' bilgisini ekleme."
            "EÄŸer kullanÄ±cÄ± bir Ã¶nceki cevapa atÄ±fta bulunursa, lÃ¼tfen bu atÄ±fÄ± dikkate alarak Ã¶nceki soruyu ve cevabÄ± dikkate alarak ve tekrar dosya taramasÄ± yaparak yanÄ±t ver."
            "KullanÄ±cÄ± cevaptan emin deÄŸilse, lÃ¼fen daha detaylÄ± bilgi ver veya ilgili maddeyi belirt."
            "AÅŸaÄŸÄ±daki baÄŸlamÄ± ve sohbet geÃ§miÅŸini kullanarak soruyu yanÄ±tla."
            "Her iddiadan sonra ilgili maddeyi, fÄ±krayÄ± ve varsa benti belirt ama referans numarasÄ± kullanma."
            "Her yanÄ±tÄ±n sonunda 'Ä°lgili madde:' baÅŸlÄ±ÄŸÄ± ile dosya adÄ±, sayfa numarasÄ±, madde, fÄ±kra ve bent bilgilerini belirt."
            "Bilgi kaynaÄŸÄ± veya kaynak listesi ekleme."
            ),
        MessagesPlaceholder(variable_name="history"),
        ("system", "BaÄŸlam:\n{context}"),
        ("human", "Soru: {question}")
    ])
    
    return (
        RunnablePassthrough.assign( context=lambda x: format_context(x["docs"]))| prompt | LLM | StrOutputParser()
    )

def create_chat_chain():
    """YÃ¶netmelik dÄ±ÅŸÄ± sohbet mesajlarÄ± iÃ§in zincir oluÅŸturma"""
    prompt = ChatPromptTemplate.from_messages([
        ("system", 
            "Sen yardÄ±msever, samimi bir sohbet asistanÄ±sÄ±n.\n"
            "- BTÃœ YÃ¶netmelik Botu olduÄŸunu unutma\n"
            "- SelamlaÅŸmalara dostÃ§a karÅŸÄ±lÄ±k ver ve 'Merhaba! Ben BTU YÃ¶netmelik AsistanÄ±nÄ±z. AklÄ±nÄ±za takÄ±lan sorularÄ± sormaktan Ã§ekinmeyin!' gibi bir yanÄ±t ver."
            "- TeÅŸekkÃ¼r, memnuniyet ifadeleri ve genel sohbet mesajlarÄ±nda 'Ä°lgili madde:' bilgisini sakÄ±n kullanma ve ekleme"
            "- EÄŸer kullanÄ±cÄ± bir Ã¶nceki cevapa atÄ±fta bulunursa, lÃ¼tfen bu atÄ±fÄ± dikkate alarak Ã¶nceki soruyu ve cevabÄ± dikkate alarak ve tekrar dosya taramasÄ± yaparak yanÄ±t ver.\n"
            "- KullanÄ±cÄ± cevaptan emin deÄŸilse, lÃ¼fen daha detaylÄ± bilgi ver veya ilgili maddeyi belirt.\n"
            "- YÃ¶netmelik dÄ±ÅŸÄ± sorularda kibarca yÃ¶nlendir yap"
            "'ilgili madde:' bilgisini sakÄ±n kullanma ve ekleme"
            ),
        MessagesPlaceholder(variable_name="history"),
        ("human", "{question}")
    ])
    
    return prompt | LLM | StrOutputParser()

def format_context(docs: List[Document]) -> str:
    """Belgeleri formatlÄ± metne dÃ¶nÃ¼ÅŸtÃ¼rme iÅŸlemi"""
    context_parts = []
    for doc in docs:
        # Metadata'dan dosya adÄ±nÄ± al
        file_name = doc.metadata.get('file', 'Bilinmeyen Dosya')
        page_no = doc.metadata.get('page', '')
        madde_no = doc.metadata.get('madde_no', '')
        
        # BaÄŸlam metni oluÅŸtur
        context_part = f"[Dosya: {file_name}"
        if page_no:
            context_part += f", Sayfa: {page_no}"
        if madde_no:
            context_part += f", Madde: {madde_no}"
        context_part += f"]\n{doc.page_content}"
        
        context_parts.append(context_part)
    
    return "\n\n".join(context_parts)

# Telegram Bot FonksiyonlarÄ±
async def start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "Merhaba! Ben BTÃœ YÃ¶netmelik AsistanÄ±nÄ±z.ðŸ¤–\n"
        "YÃ¶netmelikle ilgili sorularÄ±nÄ±zÄ± aÃ§Ä±k ve net bir ÅŸekilde yazarsanÄ±z yardÄ±mcÄ± olabilirim."
    )

async def handle(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    user_msg = update.message.text.strip()
    chat_id = update.message.chat_id
    
    # YazÄ±yor...
    await ctx.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
    
    # BelleÄŸi yÃ¶net
    history = get_message_history(ctx.chat_data)
    
    # YÃ¶netmelik belge arama
    pairs = vectordb.similarity_search_with_relevance_scores(user_msg, k=6)
    docs = [doc for doc, score in pairs if score >= THRESH]

    if docs:
        # YÃ¶netmelik zinciri
        regulation_chain = create_regulation_chain()
        context = {
            "question": user_msg,
            "docs": docs,
            "history": history
        }
        
        loop = asyncio.get_running_loop()
        answer = await loop.run_in_executor(
            None, lambda: regulation_chain.invoke(context))

        
        await update.message.reply_text(answer)
        update_history(ctx.chat_data, user_msg, answer)
        return

    # Sohbet mesajlarÄ± (yÃ¶netmelik dÄ±ÅŸÄ±)
    chat_chain = create_chat_chain()
    context = {
        "question": user_msg,
        "history": history
    }
    
    loop = asyncio.get_running_loop()
    answer = await loop.run_in_executor(
        None, lambda: chat_chain.invoke(context))
    
    
    await update.message.reply_text(answer)
    update_history(ctx.chat_data, user_msg, answer)


def main():
    app = ApplicationBuilder().token(TG_TOKEN).build() 
    app.add_handler(CommandHandler("start", start)) 
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle))  
    print("ðŸ¤– Bot Ã§alÄ±ÅŸÄ±yor...")
    app.run_polling() 

if __name__ == "__main__":
    main()